name: Pre-release Build

# Beta, alpha ve release candidate build'leri için
on:
  workflow_dispatch:
    inputs:
      prerelease_type:
        description: 'Prerelease type'
        required: true
        default: 'beta'
        type: choice
        options:
        - alpha
        - beta
        - rc
      version_suffix:
        description: 'Version suffix (optional)'
        required: false
        type: string

jobs:
  # Pre-release version belirleme
  determine-prerelease-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Determine prerelease version
      id: version
      run: |
        PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"
        VERSION_SUFFIX="${{ github.event.inputs.version_suffix }}"
        
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Pre-release version oluştur
        if [ -n "$VERSION_SUFFIX" ]; then
          NEW_VERSION="${CURRENT_VERSION}-${PRERELEASE_TYPE}.${VERSION_SUFFIX}"
        else
          NEW_VERSION=$(npm version $PRERELEASE_TYPE --preid=$PRERELEASE_TYPE --no-git-tag-version --dry-run | sed 's/v//')
        fi
        
        echo "New prerelease version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

  # Windows pre-release build
  build-windows-prerelease:
    needs: determine-prerelease-version
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Update version
      run: |
        npm version ${{ needs.determine-prerelease-version.outputs.version }} --no-git-tag-version
        
    - name: Build application
      run: npm run build
      
    - name: Build Windows installer
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-prerelease-installer
        path: dist/*.exe

  # macOS pre-release build
  build-macos-prerelease:
    needs: determine-prerelease-version
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Update version
      run: |
        npm version ${{ needs.determine-prerelease-version.outputs.version }} --no-git-tag-version
        
    - name: Build application
      run: npm run build
      
    - name: Build macOS installer
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-prerelease-installer
        path: dist/*.dmg

  # Linux pre-release build
  build-linux-prerelease:
    needs: determine-prerelease-version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Update version
      run: |
        npm version ${{ needs.determine-prerelease-version.outputs.version }} --no-git-tag-version
        
    - name: Build application
      run: npm run build
      
    - name: Build Linux installer
      run: npm run dist:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-prerelease-installer
        path: dist/*.AppImage

  # Pre-release oluşturma
  create-prerelease:
    needs: [determine-prerelease-version, build-windows-prerelease, build-macos-prerelease, build-linux-prerelease]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Pre-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.determine-prerelease-version.outputs.tag }}
        name: Pre-release ${{ needs.determine-prerelease-version.outputs.tag }}
        body: |
          ## 🧪 DocDataApp Pre-release ${{ needs.determine-prerelease-version.outputs.tag }}
          
          ### ⚠️ Önemli Notlar
          - Bu bir **pre-release** sürümüdür
          - Production ortamında kullanmayın
          - Hata bildirimi için [Issues](https://github.com/turkishdeepkebab/Docdataapp/issues) sayfasını kullanın
          
          ### 📦 İndirilebilir Dosyalar
          
          **Windows:**
          - `DocDataApp-Setup-${{ needs.determine-prerelease-version.outputs.version }}.exe` - Windows Installer
          
          **macOS:**
          - `DocDataApp-${{ needs.determine-prerelease-version.outputs.version }}.dmg` - macOS Disk Image
          
          **Linux:**
          - `DocDataApp-${{ needs.determine-prerelease-version.outputs.version }}.AppImage` - Linux AppImage
          
          ### 🧪 Test Etme
          1. İşletim sisteminize uygun dosyayı indirin
          2. Test ortamında kurun
          3. Tüm özellikleri test edin
          4. Hata bulursanız GitHub Issues'da bildirin
          
          ### 🔄 Stable Release
          Stable release için [Latest Release](https://github.com/turkishdeepkebab/Docdataapp/releases/latest) sayfasını ziyaret edin.
          
        files: |
          windows-prerelease-installer/*.exe
          macos-prerelease-installer/*.dmg
          linux-prerelease-installer/*.AppImage
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
