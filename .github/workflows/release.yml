name: Release Automation

# Bu workflow manuel olarak tetiklenir veya belirli ko≈üullarda √ßalƒ±≈üƒ±r
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      prerelease_type:
        description: 'Prerelease type (if prerelease is selected)'
        required: false
        default: 'beta'
        type: choice
        options:
        - alpha
        - beta
        - rc
  push:
    branches:
      - main
      - develop
    paths:
      - 'package.json'
      - 'CHANGELOG.md'

jobs:
  # Release version belirleme
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"
        else
          # Otomatik version belirleme
          RELEASE_TYPE="patch"
          PRERELEASE_TYPE="beta"
        fi
        
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$RELEASE_TYPE" = "prerelease" ]; then
          NEW_VERSION=$(npm version $PRERELEASE_TYPE --preid=$PRERELEASE_TYPE --no-git-tag-version --dry-run | sed 's/v//')
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          NEW_VERSION=$(npm version $RELEASE_TYPE --no-git-tag-version --dry-run | sed 's/v//')
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # Changelog olu≈üturma
  generate-changelog:
    needs: determine-version
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate changelog
      id: changelog
      run: |
        # Son tag'i bul
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          # ƒ∞lk release
          CHANGELOG="## üéâ ƒ∞lk Release v${{ needs.determine-version.outputs.version }}
          
          ### ‚ú® Yeni √ñzellikler
          - DocDataApp'in ilk s√ºr√ºm√º
          - AI destekli dok√ºman i≈üleme
          - √áoklu platform desteƒüi (Windows, macOS, Linux)
          - Modern ve kullanƒ±cƒ± dostu aray√ºz
          
          ### üöÄ Kurulum
          ƒ∞≈ületim sisteminize uygun installer'ƒ± indirin ve kurun."
        else
          # Son tag'den bu yana deƒüi≈üiklikleri al
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="## üîß v${{ needs.determine-version.outputs.version }}
            
            ### üêõ Bug Fixes
            - √áe≈üitli hata d√ºzeltmeleri ve iyile≈ütirmeler"
          else
            CHANGELOG="## üöÄ v${{ needs.determine-version.outputs.version }}
            
            ### üìù Deƒüi≈üiklikler
            $CHANGELOG"
          fi
        fi
        
        # Changelog'u dosyaya yaz
        echo "$CHANGELOG" > CHANGELOG.md
        
        # Output olarak set et
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # Version g√ºncelleme ve tag olu≈üturma
  create-release:
    needs: [determine-version, generate-changelog]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config --local user.password ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version
      run: |
        if [ "${{ needs.determine-version.outputs.is-prerelease }}" = "true" ]; then
          npm version prerelease --preid=beta --no-git-tag-version
        else
          npm version ${{ github.event.inputs.release_type || 'patch' }} --no-git-tag-version
        fi
        
    - name: Create tag
      run: |
        VERSION=$(node -p "require('./package.json').version")
        git add package.json CHANGELOG.md
        git commit -m "chore: bump version to v$VERSION"
        git tag "v$VERSION"
        git push origin main
        git push origin "v$VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build ve release (build.yml workflow'unu tetikler)
  trigger-build:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Trigger build workflow
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const version = '${{ needs.determine-version.outputs.version }}';
          
          // Build workflow'unu tetikle
          await github.rest.actions.createWorkflowDispatch({
            owner,
            repo,
            workflow_id: 'build.yml',
            ref: 'main'
          });
          
          console.log(`Build workflow triggered for version v${version}`);
