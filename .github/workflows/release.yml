name: Release Automation

# Bu workflow manuel olarak veya belirli ko≈üullarda tetiklenir
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false
      changelog:
        description: 'Changelog content'
        required: false
        default: ''

jobs:
  # Version validation
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is-prerelease: ${{ steps.validate.outputs.is-prerelease }}
    
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)[0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format. Use semantic versioning (e.g., v1.0.0, v1.0.0-beta.1)"
            exit 1
          fi
          
          # Check if it's a pre-release
          if [[ $VERSION =~ -(alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version $VERSION is valid"

  # Create changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-version
    outputs:
      changelog: ${{ steps.changelog.outputs.content }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## üöÄ DocDataApp $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### üì¶ Downloads" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Windows:**" >> CHANGELOG.md
          echo "- Download the \`.exe\` installer" >> CHANGELOG.md
          echo "- Run the installer and follow the setup wizard" >> CHANGELOG.md
          echo "- The app will be installed with all dependencies" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**macOS:**" >> CHANGELOG.md
          echo "- Download the \`.dmg\` file" >> CHANGELOG.md
          echo "- Open the DMG and drag the app to Applications" >> CHANGELOG.md
          echo "- First run may require security permission approval" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Linux:**" >> CHANGELOG.md
          echo "- Download the \`.AppImage\` file" >> CHANGELOG.md
          echo "- Make it executable: \`chmod +x DocDataApp-*.AppImage\`" >> CHANGELOG.md
          echo "- Run: \`./DocDataApp-*.AppImage\`" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### üîß System Requirements" >> CHANGELOG.md
          echo "- **Windows:** Windows 10 or later (64-bit)" >> CHANGELOG.md
          echo "- **macOS:** macOS 10.15 or later" >> CHANGELOG.md
          echo "- **Linux:** Ubuntu 18.04 or later (64-bit)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### üìã What's New" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Generate commit-based changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Changes since $PREVIOUS_TAG:" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Add custom changelog if provided
          if [ -n "${{ github.event.inputs.changelog }}" ]; then
            echo "### Custom Changes:" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "${{ github.event.inputs.changelog }}" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          echo "### üêõ Bug Reports" >> CHANGELOG.md
          echo "If you encounter any issues, please report them on our [GitHub Issues](https://github.com/turkishdeepkebab/Docdataapp/issues) page." >> CHANGELOG.md
          
          # Output changelog content
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Create tag and trigger build
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-version, generate-changelog]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
      - name: Wait for build completion
        run: |
          echo "‚è≥ Waiting for build workflow to complete..."
          # Bu adƒ±m build workflow'unun tamamlanmasƒ±nƒ± bekler
          # Ger√ßek implementasyonda GitHub API kullanarak workflow status kontrol edilebilir
          sleep 300  # 5 dakika bekle
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-version.outputs.is-prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update README with latest release info
  update-readme:
    name: Update README
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          DATE=$(date +'%Y-%m-%d')
          
          # README.md dosyasƒ±nƒ± g√ºncelle
          if [ -f README.md ]; then
            # Latest release badge'ini g√ºncelle
            sed -i "s/!\[Latest Release\](.*)/![Latest Release](https://img.shields.io/badge/release-$VERSION-blue.svg)/" README.md
            
            # Download links'ini g√ºncelle
            sed -i "s|Download for Windows.*|Download for Windows](https://github.com/turkishdeepkebab/Docdataapp/releases/download/$VERSION/DocDataApp-$VERSION.exe)|" README.md
            sed -i "s|Download for macOS.*|Download for macOS](https://github.com/turkishdeepkebab/Docdataapp/releases/download/$VERSION/DocDataApp-$VERSION.dmg)|" README.md
            sed -i "s|Download for Linux.*|Download for Linux](https://github.com/turkishdeepkebab/Docdataapp/releases/download/$VERSION/DocDataApp-$VERSION.AppImage)|" README.md
          fi
          
      - name: Commit and push changes
        run: |
          git add README.md
          git commit -m "Update README for release ${{ needs.validate-version.outputs.version }}" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"
