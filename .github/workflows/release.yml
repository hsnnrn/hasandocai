name: Automated Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      skip_build:
        description: 'Skip building (for hotfixes)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
      new_version: ${{ steps.bump_version.outputs.new_version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: get_current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${{ steps.get_current_version.outputs.current_version }}
          RELEASE_TYPE=${{ github.event.inputs.release_type }}
          
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            # Create prerelease version
            NEW_VERSION="${CURRENT_VERSION}-beta.$(date +%Y%m%d%H%M%S)"
          else
            # Use npm version to bump
            npm version $RELEASE_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi
          
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Generate changelog
        id: generate_changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges --pretty=format:"- %s")
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --no-merges --pretty=format:"- %s")
          fi
          
          # Create changelog entry
          cat > CHANGELOG_ENTRY.md << EOF
          ## [${{ steps.bump_version.outputs.new_version }}] - $(date +%Y-%m-%d)
          
          ### Changes
          $COMMITS
          
          ### Installation
          Download the latest version from [GitHub Releases](https://github.com/hsnnrn/DocAiProduction/releases/tag/${{ steps.bump_version.outputs.new_tag }})
          EOF
          
          # Output changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_ENTRY.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          if [ -f CHANGELOG.md ]; then
            # Prepend new changelog entry
            cat CHANGELOG_ENTRY.md > temp_changelog.md
            echo "" >> temp_changelog.md
            cat CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            # Create new changelog
            cp CHANGELOG_ENTRY.md CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          
          # Create and push tag
          git tag -a ${{ steps.bump_version.outputs.new_tag }} -m "Release ${{ steps.bump_version.outputs.new_tag }}"
          git push origin main
          git push origin ${{ steps.bump_version.outputs.new_tag }}

  trigger-build:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_build != 'true' }}
    
    steps:
      - name: Trigger build workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: build-triggered
          client-payload: |
            {
              "tag": "${{ needs.create-release.outputs.new_tag }}",
              "version": "${{ needs.create-release.outputs.new_version }}",
              "release_type": "${{ github.event.inputs.release_type }}"
            }

  notify-completion:
    needs: [create-release, trigger-build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "‚úÖ Release ${{ needs.create-release.outputs.new_tag }} created successfully!"
            echo "üîó View release: https://github.com/hsnnrn/DocAiProduction/releases/tag/${{ needs.create-release.outputs.new_tag }}"
            
            if [ "${{ needs.trigger-build.result }}" = "success" ]; then
              echo "üöÄ Build workflow triggered successfully!"
            elif [ "${{ needs.trigger-build.result }}" = "skipped" ]; then
              echo "‚è≠Ô∏è Build skipped as requested"
            else
              echo "‚ùå Build workflow failed"
            fi
          else
            echo "‚ùå Release creation failed"
          fi
