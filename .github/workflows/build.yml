name: Build and Release

# Bu workflow her yeni tag push'unda otomatik olarak √ßalƒ±≈üƒ±r
on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 gibi semantic versioning formatƒ±nda tag'ler
  workflow_dispatch:  # Manuel tetikleme i√ßin

# Environment variables
env:
  NODE_VERSION: '18'
  ELECTRON_VERSION: '25'

jobs:
  # Windows build job
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm rebuild --ignore-scripts
        
      - name: Build application
        run: npm run build
        
      - name: Build Windows installer
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            dist/*.exe
            dist/*.exe.blockmap
          retention-days: 30

  # macOS build job
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --ignore-scripts
          npm rebuild --ignore-scripts
        
      - name: Build application
        run: npm run build
        
      - name: Build macOS DMG
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS code signing i√ßin (opsiyonel)
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            dist/*.dmg
            dist/*.dmg.blockmap
          retention-days: 30

  # Linux build job (devre dƒ±≈üƒ± - canvas dependency sorunu)
  # build-linux:
  #   name: Build Linux
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #         
  #     - name: Install dependencies
  #       run: npm ci
  #       
  #     - name: Build application
  #       run: npm run build
  #       
  #     - name: Build Linux AppImage
  #       run: npm run dist:linux
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         
  #     - name: Upload Linux artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux-installer
  #         path: |
  #           dist/*.AppImage
  #           dist/*.tar.gz
  #         retention-days: 30

  # Release job - t√ºm build'ler tamamlandƒ±ktan sonra √ßalƒ±≈üƒ±r
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ DocDataApp ${{ github.ref_name }}
            
            ### üì¶ Downloads
            
            **Windows:**
            - Download the `.exe` installer
            - Run the installer and follow the setup wizard
            - The app will be installed with all dependencies
            
            **macOS:**
            - Download the `.dmg` file
            - Open the DMG and drag the app to Applications
            - First run may require security permission approval
            
            **Linux:**
            - Download the `.AppImage` file
            - Make it executable: `chmod +x DocDataApp-*.AppImage`
            - Run: `./DocDataApp-*.AppImage`
            
            ### üîß System Requirements
            - **Windows:** Windows 10 or later (64-bit)
            - **macOS:** macOS 10.15 or later
            - **Linux:** Ubuntu 18.04 or later (64-bit)
            
            ### üìã What's New
            - Automated builds with GitHub Actions
            - Cross-platform support
            - Auto-updater integration
            - All dependencies bundled
            
            ### üêõ Bug Reports
            If you encounter any issues, please report them on our [GitHub Issues](https://github.com/turkishdeepkebab/Docdataapp/issues) page.
            
          files: |
            artifacts/windows-installer/*
            artifacts/macos-installer/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scanning (opsiyonel)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high